!function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=90)}([function(e,t,n){"use strict";var a=Array.isArray;t.a=a},function(e,t,n){"use strict";var a=n(27),r="object"==typeof self&&self&&self.Object===Object&&self,i=a.a||r||Function("return this")();t.a=i},function(e,t,n){"use strict";var a=n(1).a.Symbol;t.a=a},,function(e,t,n){"use strict";var a,r=n(28),i=n(1).a["__core-js_shared__"],o=(a=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+a:"";var s=function(e){return!!o&&o in e},c=n(9),u=n(8),l=/^\[object .+?Constructor\]$/,d=Function.prototype,p=Object.prototype,h=d.toString,f=p.hasOwnProperty,b=RegExp("^"+h.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var v=function(e){return!(!Object(c.a)(e)||s(e))&&(Object(r.a)(e)?b:l).test(Object(u.a)(e))};var g=function(e,t){return null==e?void 0:e[t]};t.a=function(e,t){var n=g(e,t);return v(n)?n:void 0}},function(e,t,n){"use strict";t.a=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";var a=n(2),r=Object.prototype,i=r.hasOwnProperty,o=r.toString,s=a.a?a.a.toStringTag:void 0;var c=function(e){var t=i.call(e,s),n=e[s];try{e[s]=void 0;var a=!0}catch(e){}var r=o.call(e);return a&&(t?e[s]=n:delete e[s]),r},u=Object.prototype.toString;var l=function(e){return u.call(e)},d=a.a?a.a.toStringTag:void 0;t.a=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":d&&d in Object(e)?c(e):l(e)}},function(e,t,n){"use strict";var a=n(14);t.a=function(e){if("string"==typeof e||Object(a.a)(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(e,t,n){"use strict";var a=Function.prototype.toString;t.a=function(e){if(null!=e){try{return a.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){"use strict";t.a=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";var a=function(){this.__data__=[],this.size=0},r=n(19);var i=function(e,t){for(var n=e.length;n--;)if(Object(r.a)(e[n][0],t))return n;return-1},o=Array.prototype.splice;var s=function(e){var t=this.__data__,n=i(t,e);return!(n<0)&&(n==t.length-1?t.pop():o.call(t,n,1),--this.size,!0)};var c=function(e){var t=this.__data__,n=i(t,e);return n<0?void 0:t[n][1]};var u=function(e){return i(this.__data__,e)>-1};var l=function(e,t){var n=this.__data__,a=i(n,e);return a<0?(++this.size,n.push([e,t])):n[a][1]=t,this};function d(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}d.prototype.clear=a,d.prototype.delete=s,d.prototype.get=c,d.prototype.has=u,d.prototype.set=l;t.a=d},function(e,t,n){"use strict";var a=n(4),r=n(1),i=Object(a.a)(r.a,"Map");t.a=i},function(e,t,n){"use strict";var a=n(4),r=Object(a.a)(Object,"create");var i=function(){this.__data__=r?r(null):{},this.size=0};var o=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},s=Object.prototype.hasOwnProperty;var c=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return s.call(t,e)?t[e]:void 0},u=Object.prototype.hasOwnProperty;var l=function(e){var t=this.__data__;return r?void 0!==t[e]:u.call(t,e)};var d=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this};function p(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}p.prototype.clear=i,p.prototype.delete=o,p.prototype.get=c,p.prototype.has=l,p.prototype.set=d;var h=p,f=n(10),b=n(11);var v=function(){this.size=0,this.__data__={hash:new h,map:new(b.a||f.a),string:new h}};var g=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e};var A=function(e,t){var n=e.__data__;return g(t)?n["string"==typeof t?"string":"hash"]:n.map};var m=function(e){var t=A(this,e).delete(e);return this.size-=t?1:0,t};var y=function(e){return A(this,e).get(e)};var O=function(e){return A(this,e).has(e)};var E=function(e,t){var n=A(this,e),a=n.size;return n.set(e,t),this.size+=n.size==a?0:1,this};function S(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}S.prototype.clear=v,S.prototype.delete=m,S.prototype.get=y,S.prototype.has=O,S.prototype.set=E;t.a=S},function(e,t,n){"use strict";var a=n(0),r=n(14),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;t.a=function(e,t){if(Object(a.a)(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Object(r.a)(e))||(o.test(e)||!i.test(e)||null!=t&&e in Object(t))}},function(e,t,n){"use strict";var a=n(6),r=n(5);t.a=function(e){return"symbol"==typeof e||Object(r.a)(e)&&"[object Symbol]"==Object(a.a)(e)}},function(e,t,n){"use strict";t.a=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t,n){"use strict";var a=n(0),r=n(13),i=n(12);function o(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var a=arguments,r=t?t.apply(this,a):a[0],i=n.cache;if(i.has(r))return i.get(r);var o=e.apply(this,a);return n.cache=i.set(r,o)||i,o};return n.cache=new(o.Cache||i.a),n}o.Cache=i.a;var s=o;var c=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,u=/\\(\\)?/g,l=function(e){var t=s(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(c,(function(e,n,a,r){t.push(a?r.replace(u,"$1"):n||e)})),t})),d=n(2),p=n(30),h=n(14),f=d.a?d.a.prototype:void 0,b=f?f.toString:void 0;var v=function e(t){if("string"==typeof t)return t;if(Object(a.a)(t))return Object(p.a)(t,e)+"";if(Object(h.a)(t))return b?b.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n};var g=function(e){return null==e?"":v(e)};t.a=function(e,t){return Object(a.a)(e)?e:Object(r.a)(e,t)?[e]:l(g(e))}},function(e,t,n){"use strict";var a=n(4),r=n(1),i=Object(a.a)(r.a,"Set");t.a=i},function(e,t,n){"use strict";function a(e){var t=document.createElement("template");return e=e.trim(),t.innerHTML=e,t.content.firstChild}n.d(t,"a",(function(){return a}))},function(e,t,n){"use strict";t.a=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){"use strict";var a=n(16),r=n(7);t.a=function(e,t){for(var n=0,i=(t=Object(a.a)(t,e)).length;null!=e&&n<i;)e=e[Object(r.a)(t[n++])];return n&&n==i?e:void 0}},function(e,t,n){"use strict";var a=/^(?:0|[1-9]\d*)$/;t.a=function(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&a.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){"use strict";var a=n(28),r=n(15);t.a=function(e){return null!=e&&Object(r.a)(e.length)&&!Object(a.a)(e)}},function(e,t,n){"use strict";var a=n(44),r=n(38),i=n(39),o=Object(i.a)(Object.keys,Object),s=Object.prototype.hasOwnProperty;var c=function(e){if(!Object(r.a)(e))return o(e);var t=[];for(var n in Object(e))s.call(e,n)&&"constructor"!=n&&t.push(n);return t},u=n(22);t.a=function(e){return Object(u.a)(e)?Object(a.a)(e):c(e)}},function(e,t,n){"use strict";var a=n(6),r=n(5);var i=function(e){return Object(r.a)(e)&&"[object Arguments]"==Object(a.a)(e)},o=Object.prototype,s=o.hasOwnProperty,c=o.propertyIsEnumerable,u=i(function(){return arguments}())?i:function(e){return Object(r.a)(e)&&s.call(e,"callee")&&!c.call(e,"callee")};t.a=u},function(e,t,n){"use strict";(function(e){var a=n(1),r=n(59),i="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=o&&o.exports===i?a.a.Buffer:void 0,c=(s?s.isBuffer:void 0)||r.a;t.a=c}).call(this,n(56)(e))},function(e,t,n){"use strict";var a=n(60),r=n(43);var i=function(e,t){return Object(a.a)(e,t,(function(t,n){return Object(r.a)(e,n)}))},o=n(31),s=n(2),c=n(24),u=n(0),l=s.a?s.a.isConcatSpreadable:void 0;var d=function(e){return Object(u.a)(e)||Object(c.a)(e)||!!(l&&e&&e[l])};var p=function e(t,n,a,r,i){var s=-1,c=t.length;for(a||(a=d),i||(i=[]);++s<c;){var u=t[s];n>0&&a(u)?n>1?e(u,n-1,a,r,i):Object(o.a)(i,u):r||(i[i.length]=u)}return i};var h=function(e){return(null==e?0:e.length)?p(e,1):[]};var f=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)},b=Math.max;var v=function(e,t,n){return t=b(void 0===t?e.length-1:t,0),function(){for(var a=arguments,r=-1,i=b(a.length-t,0),o=Array(i);++r<i;)o[r]=a[t+r];r=-1;for(var s=Array(t+1);++r<t;)s[r]=a[r];return s[t]=n(o),f(e,this,s)}};var g=function(e){return function(){return e}},A=n(47),m=n(36),y=A.a?function(e,t){return Object(A.a)(e,"toString",{configurable:!0,enumerable:!1,value:g(t),writable:!0})}:m.a,O=Date.now;var E=function(e){var t=0,n=0;return function(){var a=O(),r=16-(a-n);if(n=a,r>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(y);var S=function(e){return E(v(e,void 0,h),e+"")}((function(e,t){return null==e?{}:i(e,t)}));t.a=S},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(78))},function(e,t,n){"use strict";var a=n(6),r=n(9);t.a=function(e){if(!Object(r.a)(e))return!1;var t=Object(a.a)(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t,n){"use strict";t.a=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},function(e,t,n){"use strict";t.a=function(e,t){for(var n=-1,a=null==e?0:e.length,r=Array(a);++n<a;)r[n]=t(e[n],n,e);return r}},function(e,t,n){"use strict";t.a=function(e,t){for(var n=-1,a=t.length,r=e.length;++n<a;)e[r+n]=t[n];return e}},function(e,t,n){"use strict";var a=n(6),r=n(15),i=n(5),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1;var s=function(e){return Object(i.a)(e)&&Object(r.a)(e.length)&&!!o[Object(a.a)(e)]};var c=function(e){return function(t){return e(t)}},u=n(46),l=u.a&&u.a.isTypedArray,d=l?c(l):s;t.a=d},,function(e,t,n){"use strict";n.d(t,"a",(function(){return a}));class a{constructor(){var e,t,n;n=[],(t="subscribers")in(e=this)?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,window.addEventListener("message",e=>{try{const t=JSON.parse(e.data);for(let{eventType:e,callback:n}of this.subscribers)e===t.eventType&&n(t.data)}catch(e){}})}subscribe(e,t){this.subscribers.push({eventType:e,callback:t})}notify(e,t={}){const n=JSON.stringify({eventType:e,data:t});window.postMessage(n,"*")}}},function(e,t,n){"use strict";t.a=function(e,t){return e.has(t)}},function(e,t,n){"use strict";t.a=function(e){return e}},function(e,t,n){"use strict";var a=n(31),r=n(0);t.a=function(e,t,n){var i=t(e);return Object(r.a)(e)?i:Object(a.a)(i,n(e))}},function(e,t,n){"use strict";var a=Object.prototype;t.a=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||a)}},function(e,t,n){"use strict";t.a=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){"use strict";t.a=function(){return[]}},function(e,t,n){"use strict";var a=n(10);var r=function(){this.__data__=new a.a,this.size=0};var i=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n};var o=function(e){return this.__data__.get(e)};var s=function(e){return this.__data__.has(e)},c=n(11),u=n(12);var l=function(e,t){var n=this.__data__;if(n instanceof a.a){var r=n.__data__;if(!c.a||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new u.a(r)}return n.set(e,t),this.size=n.size,this};function d(e){var t=this.__data__=new a.a(e);this.size=t.size}d.prototype.clear=r,d.prototype.delete=i,d.prototype.get=o,d.prototype.has=s,d.prototype.set=l;var p=d,h=n(42);var f=function(e,t){for(var n=-1,a=null==e?0:e.length;++n<a;)if(t(e[n],n,e))return!0;return!1},b=n(35);var v=function(e,t,n,a,r,i){var o=1&n,s=e.length,c=t.length;if(s!=c&&!(o&&c>s))return!1;var u=i.get(e);if(u&&i.get(t))return u==t;var l=-1,d=!0,p=2&n?new h.a:void 0;for(i.set(e,t),i.set(t,e);++l<s;){var v=e[l],g=t[l];if(a)var A=o?a(g,v,l,t,e,i):a(v,g,l,e,t,i);if(void 0!==A){if(A)continue;d=!1;break}if(p){if(!f(t,(function(e,t){if(!Object(b.a)(p,t)&&(v===e||r(v,e,n,a,i)))return p.push(t)}))){d=!1;break}}else if(v!==g&&!r(v,g,n,a,i)){d=!1;break}}return i.delete(e),i.delete(t),d},g=n(2),A=n(1),m=A.a.Uint8Array,y=n(19);var O=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,a){n[++t]=[a,e]})),n},E=n(29),S=g.a?g.a.prototype:void 0,_=S?S.valueOf:void 0;var I=function(e,t,n,a,r,i,o){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!i(new m(e),new m(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return Object(y.a)(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var s=O;case"[object Set]":var c=1&a;if(s||(s=E.a),e.size!=t.size&&!c)return!1;var u=o.get(e);if(u)return u==t;a|=2,o.set(e,t);var l=v(s(e),s(t),a,r,i,o);return o.delete(e),l;case"[object Symbol]":if(_)return _.call(e)==_.call(t)}return!1},T=n(37),j=n(45),N=n(23);var C=function(e){return Object(T.a)(e,N.a,j.a)},L=Object.prototype.hasOwnProperty;var k=function(e,t,n,a,r,i){var o=1&n,s=C(e),c=s.length;if(c!=C(t).length&&!o)return!1;for(var u=c;u--;){var l=s[u];if(!(o?l in t:L.call(t,l)))return!1}var d=i.get(e);if(d&&i.get(t))return d==t;var p=!0;i.set(e,t),i.set(t,e);for(var h=o;++u<c;){var f=e[l=s[u]],b=t[l];if(a)var v=o?a(b,f,l,t,e,i):a(f,b,l,e,t,i);if(!(void 0===v?f===b||r(f,b,n,a,i):v)){p=!1;break}h||(h="constructor"==l)}if(p&&!h){var g=e.constructor,A=t.constructor;g==A||!("constructor"in e)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof A&&A instanceof A||(p=!1)}return i.delete(e),i.delete(t),p},M=n(4),w=Object(M.a)(A.a,"DataView"),R=Object(M.a)(A.a,"Promise"),D=n(17),P=Object(M.a)(A.a,"WeakMap"),B=n(6),U=n(8),x=Object(U.a)(w),G=Object(U.a)(c.a),K=Object(U.a)(R),F=Object(U.a)(D.a),H=Object(U.a)(P),z=B.a;(w&&"[object DataView]"!=z(new w(new ArrayBuffer(1)))||c.a&&"[object Map]"!=z(new c.a)||R&&"[object Promise]"!=z(R.resolve())||D.a&&"[object Set]"!=z(new D.a)||P&&"[object WeakMap]"!=z(new P))&&(z=function(e){var t=Object(B.a)(e),n="[object Object]"==t?e.constructor:void 0,a=n?Object(U.a)(n):"";if(a)switch(a){case x:return"[object DataView]";case G:return"[object Map]";case K:return"[object Promise]";case F:return"[object Set]";case H:return"[object WeakMap]"}return t});var W=z,q=n(0),V=n(25),Y=n(32),$=Object.prototype.hasOwnProperty;var Z=function(e,t,n,a,r,i){var o=Object(q.a)(e),s=Object(q.a)(t),c=o?"[object Array]":W(e),u=s?"[object Array]":W(t),l="[object Object]"==(c="[object Arguments]"==c?"[object Object]":c),d="[object Object]"==(u="[object Arguments]"==u?"[object Object]":u),h=c==u;if(h&&Object(V.a)(e)){if(!Object(V.a)(t))return!1;o=!0,l=!1}if(h&&!l)return i||(i=new p),o||Object(Y.a)(e)?v(e,t,n,a,r,i):I(e,t,c,n,a,r,i);if(!(1&n)){var f=l&&$.call(e,"__wrapped__"),b=d&&$.call(t,"__wrapped__");if(f||b){var g=f?e.value():e,A=b?t.value():t;return i||(i=new p),r(g,A,n,a,i)}}return!!h&&(i||(i=new p),k(e,t,n,a,r,i))},J=n(5);var Q=function e(t,n,a,r,i){return t===n||(null==t||null==n||!Object(J.a)(t)&&!Object(J.a)(n)?t!=t&&n!=n:Z(t,n,a,r,e,i))};var X=function(e,t,n,a){var r=n.length,i=r,o=!a;if(null==e)return!i;for(e=Object(e);r--;){var s=n[r];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++r<i;){var c=(s=n[r])[0],u=e[c],l=s[1];if(o&&s[2]){if(void 0===u&&!(c in e))return!1}else{var d=new p;if(a)var h=a(u,l,c,e,t,d);if(!(void 0===h?Q(l,u,3,a,d):h))return!1}}return!0},ee=n(9);var te=function(e){return e==e&&!Object(ee.a)(e)};var ne=function(e){for(var t=Object(N.a)(e),n=t.length;n--;){var a=t[n],r=e[a];t[n]=[a,r,te(r)]}return t};var ae=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}};var re=function(e){var t=ne(e);return 1==t.length&&t[0][2]?ae(t[0][0],t[0][1]):function(n){return n===e||X(n,e,t)}},ie=n(20);var oe=function(e,t,n){var a=null==e?void 0:Object(ie.a)(e,t);return void 0===a?n:a},se=n(43),ce=n(13),ue=n(7);var le=function(e,t){return Object(ce.a)(e)&&te(t)?ae(Object(ue.a)(e),t):function(n){var a=oe(n,e);return void 0===a&&a===t?Object(se.a)(n,e):Q(t,a,3)}},de=n(36);var pe=function(e){return function(t){return null==t?void 0:t[e]}};var he=function(e){return function(t){return Object(ie.a)(t,e)}};var fe=function(e){return Object(ce.a)(e)?pe(Object(ue.a)(e)):he(e)};t.a=function(e){return"function"==typeof e?e:null==e?de.a:"object"==typeof e?Object(q.a)(e)?le(e[0],e[1]):re(e):fe(e)}},function(e,t,n){"use strict";var a=n(12);var r=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this};var i=function(e){return this.__data__.has(e)};function o(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new a.a;++t<n;)this.add(e[t])}o.prototype.add=o.prototype.push=r,o.prototype.has=i;t.a=o},function(e,t,n){"use strict";var a=function(e,t){return null!=e&&t in Object(e)},r=n(16),i=n(24),o=n(0),s=n(21),c=n(15),u=n(7);var l=function(e,t,n){for(var a=-1,l=(t=Object(r.a)(t,e)).length,d=!1;++a<l;){var p=Object(u.a)(t[a]);if(!(d=null!=e&&n(e,p)))break;e=e[p]}return d||++a!=l?d:!!(l=null==e?0:e.length)&&Object(c.a)(l)&&Object(s.a)(p,l)&&(Object(o.a)(e)||Object(i.a)(e))};t.a=function(e,t){return null!=e&&l(e,t,a)}},function(e,t,n){"use strict";var a=function(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a},r=n(24),i=n(0),o=n(25),s=n(21),c=n(32),u=Object.prototype.hasOwnProperty;t.a=function(e,t){var n=Object(i.a)(e),l=!n&&Object(r.a)(e),d=!n&&!l&&Object(o.a)(e),p=!n&&!l&&!d&&Object(c.a)(e),h=n||l||d||p,f=h?a(e.length,String):[],b=f.length;for(var v in e)!t&&!u.call(e,v)||h&&("length"==v||d&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||Object(s.a)(v,b))||f.push(v);return f}},function(e,t,n){"use strict";var a=function(e,t){for(var n=-1,a=null==e?0:e.length,r=0,i=[];++n<a;){var o=e[n];t(o,n,e)&&(i[r++]=o)}return i},r=n(40),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,s=o?function(e){return null==e?[]:(e=Object(e),a(o(e),(function(t){return i.call(e,t)})))}:r.a;t.a=s},function(e,t,n){"use strict";(function(e){var a=n(27),r="object"==typeof exports&&exports&&!exports.nodeType&&exports,i=r&&"object"==typeof e&&e&&!e.nodeType&&e,o=i&&i.exports===r&&a.a.process,s=function(){try{var e=i&&i.require&&i.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();t.a=s}).call(this,n(56)(e))},function(e,t,n){"use strict";var a=n(4),r=function(){try{var e=Object(a.a)(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();t.a=r},,,,,,,,,function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},,function(e,t,n){
/*!
 * clipboard.js v2.0.6
 * https://clipboardjs.com/
 * 
 * Licensed MIT © Zeno Rocha
 */
var a;a=function(){return function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t){e.exports=function(e){var t;if("SELECT"===e.nodeName)e.focus(),t=e.value;else if("INPUT"===e.nodeName||"TEXTAREA"===e.nodeName){var n=e.hasAttribute("readonly");n||e.setAttribute("readonly",""),e.select(),e.setSelectionRange(0,e.value.length),n||e.removeAttribute("readonly"),t=e.value}else{e.hasAttribute("contenteditable")&&e.focus();var a=window.getSelection(),r=document.createRange();r.selectNodeContents(e),a.removeAllRanges(),a.addRange(r),t=a.toString()}return t}},function(e,t){function n(){}n.prototype={on:function(e,t,n){var a=this.e||(this.e={});return(a[e]||(a[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var a=this;function r(){a.off(e,r),t.apply(n,arguments)}return r._=t,this.on(e,r,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),a=0,r=n.length;a<r;a++)n[a].fn.apply(n[a].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),a=n[e],r=[];if(a&&t)for(var i=0,o=a.length;i<o;i++)a[i].fn!==t&&a[i].fn._!==t&&r.push(a[i]);return r.length?n[e]=r:delete n[e],this}},e.exports=n,e.exports.TinyEmitter=n},function(e,t,n){var a=n(3),r=n(4);e.exports=function(e,t,n){if(!e&&!t&&!n)throw new Error("Missing required arguments");if(!a.string(t))throw new TypeError("Second argument must be a String");if(!a.fn(n))throw new TypeError("Third argument must be a Function");if(a.node(e))return function(e,t,n){return e.addEventListener(t,n),{destroy:function(){e.removeEventListener(t,n)}}}(e,t,n);if(a.nodeList(e))return function(e,t,n){return Array.prototype.forEach.call(e,(function(e){e.addEventListener(t,n)})),{destroy:function(){Array.prototype.forEach.call(e,(function(e){e.removeEventListener(t,n)}))}}}(e,t,n);if(a.string(e))return function(e,t,n){return r(document.body,e,t,n)}(e,t,n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}},function(e,t){t.node=function(e){return void 0!==e&&e instanceof HTMLElement&&1===e.nodeType},t.nodeList=function(e){var n=Object.prototype.toString.call(e);return void 0!==e&&("[object NodeList]"===n||"[object HTMLCollection]"===n)&&"length"in e&&(0===e.length||t.node(e[0]))},t.string=function(e){return"string"==typeof e||e instanceof String},t.fn=function(e){return"[object Function]"===Object.prototype.toString.call(e)}},function(e,t,n){var a=n(5);function r(e,t,n,a,r){var o=i.apply(this,arguments);return e.addEventListener(n,o,r),{destroy:function(){e.removeEventListener(n,o,r)}}}function i(e,t,n,r){return function(n){n.delegateTarget=a(n.target,t),n.delegateTarget&&r.call(e,n)}}e.exports=function(e,t,n,a,i){return"function"==typeof e.addEventListener?r.apply(null,arguments):"function"==typeof n?r.bind(null,document).apply(null,arguments):("string"==typeof e&&(e=document.querySelectorAll(e)),Array.prototype.map.call(e,(function(e){return r(e,t,n,a,i)})))}},function(e,t){if("undefined"!=typeof Element&&!Element.prototype.matches){var n=Element.prototype;n.matches=n.matchesSelector||n.mozMatchesSelector||n.msMatchesSelector||n.oMatchesSelector||n.webkitMatchesSelector}e.exports=function(e,t){for(;e&&9!==e.nodeType;){if("function"==typeof e.matches&&e.matches(t))return e;e=e.parentNode}}},function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.resolveOptions(t),this.initSelection()}return o(e,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=e.action,this.container=e.container,this.emitter=e.emitter,this.target=e.target,this.text=e.text,this.trigger=e.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var e=this,t="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return e.removeFake()},this.fakeHandler=this.container.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[t?"right":"left"]="-9999px";var n=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=n+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,this.container.appendChild(this.fakeElem),this.selectedText=r()(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(this.container.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(this.container.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=r()(this.target),this.copyText()}},{key:"copyText",value:function(){var e=void 0;try{e=document.execCommand(this.action)}catch(t){e=!1}this.handleResult(e)}},{key:"handleResult",value:function(e){this.emitter.emit(e?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.trigger&&this.trigger.focus(),document.activeElement.blur(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=e,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(e){if(void 0!==e){if(!e||"object"!==(void 0===e?"undefined":i(e))||1!==e.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&e.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(e.hasAttribute("readonly")||e.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=e}},get:function(){return this._target}}]),e}(),c=n(1),u=n.n(c),l=n(2),d=n.n(l),p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),f=function(e){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return a.resolveOptions(n),a.listenClick(e),a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),h(t,[{key:"resolveOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof e.action?e.action:this.defaultAction,this.target="function"==typeof e.target?e.target:this.defaultTarget,this.text="function"==typeof e.text?e.text:this.defaultText,this.container="object"===p(e.container)?e.container:document.body}},{key:"listenClick",value:function(e){var t=this;this.listener=d()(e,"click",(function(e){return t.onClick(e)}))}},{key:"onClick",value:function(e){var t=e.delegateTarget||e.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new s({action:this.action(t),target:this.target(t),text:this.text(t),container:this.container,trigger:t,emitter:this})}},{key:"defaultAction",value:function(e){return b("action",e)}},{key:"defaultTarget",value:function(e){var t=b("target",e);if(t)return document.querySelector(t)}},{key:"defaultText",value:function(e){return b("text",e)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],t="string"==typeof e?[e]:e,n=!!document.queryCommandSupported;return t.forEach((function(e){n=n&&!!document.queryCommandSupported(e)})),n}}]),t}(u.a);function b(e,t){var n="data-clipboard-"+e;if(t.hasAttribute(n))return t.getAttribute(n)}t.default=f}]).default},e.exports=a()},function(e,t,n){"use strict";t.a=function(){return!1}},function(e,t,n){"use strict";var a=n(20),r=n(47);var i=function(e,t,n){"__proto__"==t&&r.a?Object(r.a)(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n},o=n(19),s=Object.prototype.hasOwnProperty;var c=function(e,t,n){var a=e[t];s.call(e,t)&&Object(o.a)(a,n)&&(void 0!==n||t in e)||i(e,t,n)},u=n(16),l=n(21),d=n(9),p=n(7);var h=function(e,t,n,a){if(!Object(d.a)(e))return e;for(var r=-1,i=(t=Object(u.a)(t,e)).length,o=i-1,s=e;null!=s&&++r<i;){var h=Object(p.a)(t[r]),f=n;if(r!=o){var b=s[h];void 0===(f=a?a(b,h,s):void 0)&&(f=Object(d.a)(b)?b:Object(l.a)(t[r+1])?[]:{})}c(s,h,f),s=s[h]}return e};t.a=function(e,t,n){for(var r=-1,i=t.length,o={};++r<i;){var s=t[r],c=Object(a.a)(e,s);n(c,s)&&h(o,Object(u.a)(s,e),c)}return o}},,,,,,,,,,,,,,,,,,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return MetadataPresenter}));var lodash_es__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(93),lodash_es__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(26),lodash_es__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(94),_utils_htmlToElement__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(18),_utils_jsonSyntaxHighlight__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(80);class MetadataPresenter{closeAllWindows(){document.querySelectorAll(".tpt-scope-container").forEach(e=>e.remove())}createWindow(e){const t=this.createContainer(),n=t.querySelector(".tpt-scope-content"),a=$(e).scope(),r=this.getAttributeScope(e),i=this.getPanelData(a);console.log(a);const o=[this.createSection("Feature",this.extractFeatureData(a),{collapsed:Object.keys(i).length>0}),this.createSection("Element",this.extractElementHTML(e),{collapsed:!0}),this.createSection("Panel",this.extractPanelData(i)),this.createSection("Attribute",this.extractAttributeData(r)),this.createSection("Attribute options",null==r?void 0:r.options),this.createSection("Tabs",this.extractTabsData(a)),this.createSection("Tab pages",this.extractTabPagesData(a)),this.createSection("Popup single item",this.extractPopupItemData(a)),this.createSection("Popup menus",this.extractPopupMenusData(a)),this.createSection("Popup items",this.extractPopupItemsData(a)),this.createSection("Calendar",this.extractCalendarData(a)),this.createSection("Button",this.extractButtonData(a)),this.createSection("Filter configurator",null==i?void 0:i.filterConfigurator,{collapsed:!0}),this.createSection("Attributes",null==i?void 0:i.allAttributes,{collapsed:!0}),this.createSection("Meta attributes",null==i?void 0:i.metaAttributes,{collapsed:!0}),this.createSection("Meta columns",null==i?void 0:i.metaColumns,{collapsed:!0}),this.createSection("Selected record",null==i?void 0:i.selectedRecord)];n.append(...o.filter(e=>!!e)),document.body.append(t)}createContainer(){const e=Object(_utils_htmlToElement__WEBPACK_IMPORTED_MODULE_3__.a)('\n      <div class="tpt-scope-container">\n        <div class="tpt-scope-header">\n          <div class="tpt-scope-title">Metadata</div>\n          <button type="button" class="tpt-scope-close">&times;</button>\n        </div>\n        <div class="tpt-scope-content">\n        </div>\n      </div>\n    ');return e.querySelector(".tpt-scope-close").addEventListener("click",()=>e.remove()),e}createSection(e,t,n={}){if(this.isDataEmpty(t))return null;const a=Array.isArray(t)?` (${t.length})`:"",r=Object(_utils_htmlToElement__WEBPACK_IMPORTED_MODULE_3__.a)(`\n      <div class="tpt-scope-section ${n.collapsed?"tpt-scope-section-hidden":""}">\n        <div class="tpt-scope-section-title">${e}${a}</div>\n        <div class="tpt-scope-section-content"}>\n          ${this.prettyPrintObject(t)}\n        </div>\n      </div>\n    `);return r.querySelector(".tpt-scope-section-title").addEventListener("click",()=>r.classList.toggle("tpt-scope-section-hidden")),r}isDataEmpty(e){return!e||Array.isArray(e)&&0===e.length||"object"==typeof e&&0===Object.keys(Object(lodash_es__WEBPACK_IMPORTED_MODULE_0__.a)(e,e=>void 0!==e)).length}extractFeatureData(e){var t,n,a;if(!e)return null;const r=["code","name"];return(null===(t=e.feature)||void 0===t?void 0:t.code)&&(null===(n=e.feature)||void 0===n?void 0:n.name)?Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(e.feature,r):(null===(a=e.feature)||void 0===a?void 0:a.config)?Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(e.feature.config,r):this.extractFeatureData(e.$parent)}extractElementHTML(e){const t=e.outerHTML,n=t.search(/</),a=t.search(/>\s*</),r=t.substr(n,-1===a?void 0:a+1);let i=String(r).replace(/</g,"&lt;").replace(/>/g,"&gt;");return i=i.replace(/(\s+)([\w-]+)=("[^"]*")/g,'$1<span class="tpt-syntax-green">$2</span><span class="tpt-syntax-pink">=</span><span class="tpt-json-syntax-string">$3</span>'),i=i.replace(/(?<=^&lt;)([\w-]+)/,'<span class="tpt-syntax-pink">$1</span>'),i}extractPanelData(e){return Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(e,["code","dictionaryCode","parentObjectCode","view","table","description","objectType","componentType","actionName","functionVariables"])}extractAttributeData(e){var t,n,a,r;if(!e)return null;const i=(null==e?void 0:e.attrMetadata)||(null==e||null===(t=e.state)||void 0===t?void 0:t.attrMetadata);return{nmAtributo:e.nmAtributo,value:e.value||(null===(n=e.input)||void 0===n?void 0:n.dateValue),tipoAtributo:e.value,min:e.min,max:e.max,readOnly:e.readOnly,mandatory:e.mandatory,"metaAttribute.code":null==i?void 0:i.code,"metaAttribute.componente":null==i?void 0:i.componente,"metaAttribute.tipoAtributo":null==i?void 0:i.tipoAtributo,"metaAttribute.nmAtributoCd":null==i?void 0:i.nmAtributoCd,"metaAttribute.nmAtributoDs":null==i?void 0:i.nmAtributoDs,"metaAttribute.nmTabela":null==i?void 0:i.nmTabela,"metaAttribute.nmTabelaRef":null==i?void 0:i.nmTabelaRef,"metaAttribute.mask":null==i?void 0:i.mask,"metaAttribute.nrSeqVisao":null==i?void 0:i.nrSeqVisao,"metaAttribute.nrSeqDicObjeto":null==i?void 0:i.nrSeqDicObjeto,"metaAttribute.cdLocator":null==i?void 0:i.cdLocator,"metaAttribute.nrSeqLocalizador":null==i?void 0:i.nrSeqLocalizador,codes:e.codes,dsValores:e.dsValores,buttons:null==e||null===(a=e.objeto)||void 0===a||null===(r=a.buttons)||void 0===r?void 0:r.map(e=>Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(e,["cd","ds"]))}}extractTabsData(e){var t,n;if(!e)return null;if([e.listBoxType,e.type,null===(t=e.$parent)||void 0===t?void 0:t.listBoxType,null===(n=e.$parent)||void 0===n?void 0:n.type].some(e=>"NAV"===e)){var a;const t=e.options||(null===(a=e.$parent)||void 0===a?void 0:a.options),n=["CD","DS"];return null==t?void 0:t.map(e=>Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(e,n))}}extractTabPagesData(e){var t;if(!e)return null;if((null==e||null===(t=e.pages)||void 0===t?void 0:t.length)>0&&e.pages[0].code){const t=["code","label","order"];return e.pages.map(e=>Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(e,t))}return this.extractTabPagesData(e.$parent)}extractPopupItemData(e){return e?e.node?this.mapPopupMenuItem(e.node):this.extractPopupItemData(e.$parent):null}extractPopupMenusData(scope){if(!scope)return null;const menusKeys=["scope.wActivator.menuconfig.menus","scope.wModel.menuHandleBarConfig.menus","scope.wModel.menus","scope.wpopupmenuConfig.menus"],menus=menusKeys.reduce((acc,key)=>{try{const result=eval(key);if((null==result?void 0:result.length)>0)return result}catch(e){}return acc},null);return menus||this.extractPopupMenusData(scope.$parent)}extractPopupItemsData(e){return e?e.mapNodes?Object(lodash_es__WEBPACK_IMPORTED_MODULE_2__.a)(e.mapNodes,e=>this.mapPopupMenuItem(e)):this.extractPopupItemsData(e.$parent):null}extractCalendarData(e){return e?e.calendarRequest?{action:e.calendarRequest.action,date:null==e||null===(t=e.date)||void 0===t?void 0:t.toString(),type:e.type,parentDtoObject:null==e||null===(n=e.wModel)||void 0===n||null===(a=n.menuconfig)||void 0===a?void 0:a.parentDtoCode}:this.extractCalendarData(e.$parent):null;var t,n,a}extractButtonData(e){if(!e)return null;if(e.btn){const{id:t,title:n,type:a,color:r,isEnabled:i}=e.btn,o=t.replace(/\D/g,"");return{id:t,code:o,title:n,type:a,isEnabled:i,color:r}}return this.extractButtonData(e.$parent)}getPanelData(e){var t,n;if(!e)return{};const a=["dtoCode","nrSeqFilter"],r=["nmAtributo","label","nmTabela","nrSeqVisao","tipoAtributo","componente","nrSeqLocalizador","cdLocator","mandatory"],i=["id","name","displayName","field","tipoColuna","componente"],o=null===(t=e.wActivator)||void 0===t?void 0:t.dataSourceRequest,s=null==o?void 0:o.nrSeqVisao;var c,u,l,d,p,h,f,b,v,g,A,m,y,O,E,S,_,I,T,j,N,C,L,k;return"cpanel"===e.detailParentType?{code:e.dtoCode,dictionaryCode:null===(c=e.dto)||void 0===c?void 0:c.dictionaryCode,parentObjectCode:null===(u=e.dto)||void 0===u?void 0:u.parentObjectCode,view:s||(null===(l=e.wModel)||void 0===l?void 0:l.viewNumber),table:"",description:null===(d=e.wModel)||void 0===d?void 0:d.title,objectType:null===(p=e.dto)||void 0===p?void 0:p.objectType,componentType:e.detailParentType,actionName:null===(h=e.wModel)||void 0===h||null===(f=h.activationOptions)||void 0===f?void 0:f.actionName,filterConfigurator:Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(null===(b=e.filterConfigurator)||void 0===b?void 0:b.filterActivation,a),functionVariables:e.functionVariables,allAttributes:[],metaAttributes:[],metaColumns:null===(v=e.wModel)||void 0===v||null===(g=v.gridOptions)||void 0===g||null===(A=g.columnDefs)||void 0===A?void 0:A.map(e=>Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(e,i)),selectedRecord:null===(m=e.wgridHandler)||void 0===m?void 0:m.getSelectedRow()}:(null==e||null===(n=e.dto)||void 0===n?void 0:n.code)?{code:e.dto.code,dictionaryCode:null===(y=e.dto)||void 0===y?void 0:y.dictionaryCode,parentObjectCode:null===(O=e.dto)||void 0===O?void 0:O.parentObjectCode,view:s||e.dto.viewCodeInter||e.dto.viewCode,table:e.dto.viewName,description:e.dto.description,objectType:e.dto.objectType,componentType:e.dto.componentType,actionName:null===(E=e.dto.properties)||void 0===E?void 0:E.action,filterConfigurator:Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(null===(S=e.filterConfigurator)||void 0===S?void 0:S.filterActivation,a),functionVariables:null==o?void 0:o.functionVariables,allAttributes:null===(_=e.metaData)||void 0===_||null===(I=_.dados)||void 0===I?void 0:I.allAttributes,metaAttributes:null===(T=e.metaData)||void 0===T||null===(j=T.dados)||void 0===j||null===(N=j.listaMetaAtributos)||void 0===N?void 0:N.map(e=>Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(e,r)),metaColumns:null===(C=e.metaData)||void 0===C||null===(L=C.dados)||void 0===L||null===(k=L.listametaColunas)||void 0===k?void 0:k.map(e=>Object(lodash_es__WEBPACK_IMPORTED_MODULE_1__.a)(e,i)),selectedRecord:e.selectedRecord}:this.getPanelData(e.$parent)}getAttributeScope(e,t){if(!e)return null;const n=[e=>!!(null==e?void 0:e.attrMetadata),e=>{var t;return!!(null==e||null===(t=e.state)||void 0===t?void 0:t.attrMetadata)},e=>!!(null==e?void 0:e.nmAtributo)];if(void 0!==t){const a=$(e).scope();return n[t](a)?a:this.getAttributeScope(e.parentElement,t)}return n.reduce((t,n,a)=>t||this.getAttributeScope(e,a),null)}mapPopupMenuItem(e){if(null==e?void 0:e.item){var t;const n=(null==e||null===(t=e.children)||void 0===t?void 0:t.length)>0&&e.children.map(this.mapPopupMenuItem);return{code:e.item.code,menuCode:e.item.menuCode,parentCode:e.item.parentCode,text:e.item.text,...n&&{children:n}}}}prettyPrintObject(e){return e?`<pre>${"string"==typeof e?e:Object(_utils_jsonSyntaxHighlight__WEBPACK_IMPORTED_MODULE_4__.a)(JSON.stringify(e,null,2))}</pre>`:'<span style="color: lightgray;">Empty</span>'}}},function(e,t,n){"use strict";function a(e){return(e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")).replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,(function(e){var t="number";return/^"/.test(e)?t=/:$/.test(e)?"key":"string":/true|false/.test(e)?t="boolean":/null/.test(e)&&(t="null"),'<span class="tpt-json-syntax-'+t+'">'+e+"</span>"}))}n.d(t,"a",(function(){return a}))},,,,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var a=n(58),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var o=n(34);n(84);class s{constructor(){var e,t,n;n=void 0,(t="_debouncedRender")in(e=this)?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}debouncedRender(e){this._debouncedRender||(this._debouncedRender=function(e,t){let n;return function(){clearTimeout(n),n=setTimeout(()=>e(...arguments),t)}}(this.render.bind(this),300)),this._debouncedRender(e)}}n(85);n(86);n(87);var c=n(18);n(88);function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class l{constructor(e){u(this,"enabled",!1),u(this,"inspecting",!1),u(this,"button",void 0),u(this,"layer",void 0),u(this,"presenter",void 0),this.presenter=e,this.button=Object(c.a)('<button type="button" class="tpt-inspect-button">Inspect</button>'),this.button.addEventListener("click",this.onButtonClick.bind(this)),this.layer=Object(c.a)('<div class="tpt-inspect-layer"></div>'),document.body.append(this.layer),document.addEventListener("keyup",this.onKeyUp.bind(this)),document.addEventListener("mousemove",this.onMouseMove.bind(this)),document.addEventListener("click",this.onTargetClick.bind(this))}setEnabled(e){this.enabled=e,this.enabled?document.body.append(this.button):(this.setInspecting(!1),this.button.remove())}isEnabled(){return this.enabled}onButtonClick(e){e.stopPropagation(),this.presenter.closeAllWindows(),this.setInspecting(!this.inspecting)}onKeyUp(e){"Escape"===e.key&&(this.presenter.closeAllWindows(),this.setInspecting(!1))}onMouseMove(e){if(this.resetLayer(),this.inspecting){const t=document.elementFromPoint(e.x,e.y);t!==this.button&&this.setCurrentTarget(t)}}onTargetClick(e){if(this.inspecting){this.setInspecting(!1);const t=document.elementFromPoint(e.x,e.y);this.presenter.createWindow(t)}}setInspecting(e){this.inspecting=e,this.button.innerText=this.inspecting?"Cancel":"Inspect",this.button.classList.toggle("tpt-inspect-button-cancel",this.inspecting),this.inspecting||this.resetLayer()}setCurrentTarget(e){const t=e.getBoundingClientRect(),{left:n,top:a,width:r,height:i}=t;this.updateLayer(n,a,r,i)}resetLayer(){this.updateLayer(0,0,0,0)}updateLayer(e,t,n,a){this.layer.style.top=t+"px",this.layer.style.left=e+"px",this.layer.style.width=n+"px",this.layer.style.height=a+"px"}}var d=n(79);n(89);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const h=new class{constructor(){i(this,"_options",{}),i(this,"_rendererList",[]),i(this,"_clipboard",void 0),i(this,"_observer",void 0),this._clipboard=new r.a(".tpt-copy-me, [data-clipboard]",{text:e=>e.dataset&&e.dataset.clipboard?e.dataset.clipboard:e.innerText}),this._observer=new MutationObserver(this.mutationCallback.bind(this)),this._observer.observe(document.body,{characterData:!0,childList:!0,subtree:!0})}setOptions(e){this._options=e,this.refreshRender()}add(e){this._rendererList.push(e)}refreshRender(){this._rendererList.forEach(e=>e.debouncedRender(this._options))}mutationCallback(e){for(let t of e)this._rendererList.forEach(e=>{e.condition(t)&&e.debouncedRender(this._options)})}};h.add(new class extends s{condition({type:e,target:t,addedNodes:n}){if("characterData"===e&&t.parentElement)return!!t.parentElement.closest(".w-attr-container");if("childList"===e)for(let e of n.values())if(e.classList&&e.classList.contains("w-attr-container"))return!0}render({showFieldDetails:e}){document.querySelectorAll("form.w-mdetail__container").forEach(t=>t.classList.toggle("tpt-form-mdetail",!!e)),document.querySelectorAll(".tpt-field-attr-container").forEach(e=>e.remove()),e&&document.querySelectorAll(".w-attr-container[w-attr-name]").forEach(e=>{const t=e.getAttribute("w-attr-name"),n=[].reduce.call(e.querySelectorAll(".textbox-locator-container, .w-listbox"),(e,t)=>$(t).scope().value,""),a=document.createElement("div");a.classList.add("tpt-field-attr-container"),a.appendChild(this.createItem(t)),n&&a.appendChild(this.createItem(n)),e.insertAdjacentElement("afterbegin",a)})}createItem(e){const t=document.createElement("span");return t.classList.add("tpt-fellow-label","tpt-field-attr-label","tpt-copy-me"),t.innerText=e,t.title=e,t}}),h.add(new class extends s{condition({type:e,addedNodes:t}){if("childList"===e)for(let e of t.values())if(e.classList&&e.classList.contains("slick-header-column"))return!0}render({showGridDetails:e}){document.querySelectorAll(".tpt-grid-label").forEach(e=>e.remove()),document.querySelectorAll(".slick-pane-top").forEach(t=>t.classList.toggle("tpt-slick-pane-top",!!e)),document.querySelectorAll(".slick-header-column").forEach(t=>t.classList.toggle("tpt-slick-header-column",!!e)),document.querySelectorAll(".slick-viewport-top[data-original-height]").forEach(e=>{e.style.height=e.dataset.originalHeight+"px",e.removeAttribute("data-original-height")}),e&&(document.querySelectorAll(".slick-viewport-top").forEach(e=>{e.dataset.originalHeight||(e.dataset.originalHeight=e.style.height.replace(/\D+/,""),e.style.height=Number(e.dataset.originalHeight)-20+"px")}),document.querySelectorAll(".slick-header-column").forEach(e=>{const t=e.id.replace(/^slickgrid_\d+_?/,""),n=document.createElement("span");n.classList.add("tpt-fellow-label","tpt-grid-label","tpt-copy-me"),n.innerText=t,n.title=t,e.appendChild(n)}))}}),h.add(new class extends s{constructor(){var e,t,n;super(),e=this,t="events",n=new o.a,t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,document.body.addEventListener("click",this.onClickApp.bind(this))}condition(e){const{type:t}=e,n=e.target;if("childList"===t&&n.classList&&n.classList.contains("w-launcher__apps"))return!n.querySelectorAll(".tpt-recent-features-container").length}render({showRecentFeatures:e,recentFeatures:t=[]}){document.querySelectorAll(".w-launcher__apps").forEach(n=>{let a=n.querySelector(".tpt-recent-features-container");if(null===a&&(a=document.createElement("div"),a.classList.add("tpt-recent-features-container"),n.appendChild(a)),a.style.display=e?"flex":"none",!e)return;const r=document.createElement("div");r.classList.add("tpt-recent-features-list"),t.forEach(e=>{const t=this.getFreshFeature(e);if(!t)return;const n=document.createElement("button");n.classList.add("tpt-recent-features-item"),n.innerText=t.caption,n.title=`${t.code} - ${t.name}`,t.available?n.addEventListener("click",()=>this.onClickRecentFeature(t)):n.classList.add("disabled");const a=Object(c.a)('<span class="close" title="Remove item">&times;</span>');a.addEventListener("click",e=>{e.stopPropagation(),this.removeFeature(t)}),n.append(a),r.appendChild(n)}),a.innerHTML='<div class="tpt-recent-features-title">Recents</div>',a.appendChild(r)})}onClickRecentFeature(e){this.openFeature(e),this.saveLastFeatureOpened(e),this.closeSpotlight()}getFreshFeature(e){return[...document.querySelectorAll(".w-apps-grid")].map(e=>$(e).scope()).reduce((e,t)=>[...e,...t.features],[]).find(({code:t})=>t===e.code)}openFeature(e){const t=document.querySelector(".w-apps-grid");$(t).scope().openFeature(e)}saveLastFeatureOpened(e){this.events.notify("lastFeatureOpened",{feature:e})}removeFeature(e){this.events.notify("removeFeature",{feature:e})}onClickApp(e){const t=e.target.closest(".w-feature-app");if(null===t)return;const n=$(t).scope();this.saveLastFeatureOpened(n.feature)}closeSpotlight(){$(".w-spotlight").scope().close()}}),h.add(new class extends s{constructor(){var e,t,n;super(),n=[],(t="_extractors")in(e=this)?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,this._extractors.push({containerClass:"wdbpanel-container",extractor:e=>{var t,n,a,r;return{code:e.handler.getDto().code,type:e.dto.componentType,view:(null===(t=e.wActivator)||void 0===t||null===(n=t.dataSourceRequest)||void 0===n?void 0:n.nrSeqVisao)||e.dto.viewCodeInter,table:(null===(a=e.wActivator)||void 0===a||null===(r=a.dataSourceRequest)||void 0===r?void 0:r.tableName)||e.dto.viewName}}}),this._extractors.push({containerClass:"wcpanel-container",extractor:e=>({code:e.dtoCode,type:e.wcPanelClass.toUpperCase(),view:e.wModel.viewNumber})}),this._extractors.push({containerClass:"w-dlg-panel",targetClass:"dialog-box",extractor:e=>({code:e.wcode,type:e.internalSchematics.getRootDto().componentType,view:e.internalSchematics.getRootDto().viewCode})}),this._extractors.push({containerClass:"detail-container-dialog",targetClass:"dialog-box",extractor:e=>({code:e.dto.code,type:e.dto.componentType,view:e.dto.viewCodeInter})}),this._extractors.push({containerClass:"calendar-container",extractor:e=>({code:e.wModel.menuconfig.parentDtoCode,type:"WCALENDAR"})})}condition({type:e,target:t,addedNodes:n}){if("childList"===e){const e=this._extractors.map(({containerClass:e})=>e);for(let a of e){if(t.classList&&t.classList.contains(a)&&!t.querySelector(".tpt-panel-info-container"))return!0;if(n.length)for(let e of n.values())if(e.classList&&e.classList.contains(a))return!0}}}render({showPanelDetails:e}){document.querySelectorAll(".tpt-panel-info-container").forEach(e=>e.remove()),e&&this._extractors.forEach(({containerClass:e,targetClass:t,extractor:n})=>{[].forEach.call(document.getElementsByClassName(e),e=>{const a=t?e.querySelector("."+t):e,{code:r,type:i,view:o,table:s}=n($(e).scope(),e),c=document.createElement("div");c.classList.add("tpt-panel-info-container"),c.append(this.createItem(r,i||"CODE")),o&&c.append(this.createItem(o,"VIEW")),s&&c.append(this.createItem(s)),a.style.position="relative",a.appendChild(c)})})}createItem(e,t){const n=document.createElement("div");return n.classList.add("tpt-fellow-label","tpt-panel-item"),n.dataset.clipboard=e,n.innerText=t?`${t} ${e}`:e,n.title=e,n}}),h.add(new class extends s{constructor(){super(),p(this,"inspector",void 0),p(this,"presenter",void 0),this.presenter=new d.a,this.inspector=new l(this.presenter)}condition(){return!0}render({inspectMode:e}){e&&this.inspector.isEnabled()||this.inspector.setEnabled(e)}}),h.add(new class extends s{condition(){return!document.querySelector("#tpt-user-locale")}render({showUserLocale:e}){var t;null===(t=document.querySelector("#tpt-user-locale"))||void 0===t||t.remove();const n=$(".w-header").scope();if(!e||!n)return;const{user:a}=n,r=function(e){if("string"!=typeof e)throw new TypeError("Input must be string");var t=e.split("-"),n={ab:"Abkhazian",aa:"Afar",af:"Afrikaans",ak:"Akan",sq:"Albanian",am:"Amharic",ar:"Arabic",an:"Aragonese",hy:"Armenian",as:"Assamese",av:"Avaric",ae:"Avestan",ay:"Aymara",az:"Azerbaijani",bm:"Bambara",ba:"Bashkir",eu:"Basque",be:"Belarusian",bn:"Bengali",bh:"Bihari languages",bi:"Bislama",nb:"Norwegian Bokmål",bs:"Bosnian",br:"Breton",bg:"Bulgarian",my:"Burmese",es:"Spanish",ca:"Valencian",km:"Central Khmer",ch:"Chamorro",ce:"Chechen",ny:"Nyanja",zh:"Chinese",za:"Zhuang",cu:"Old Slavonic",cv:"Chuvash",kw:"Cornish",co:"Corsican",cr:"Cree",hr:"Croatian",cs:"Czech",da:"Danish",dv:"Maldivian",nl:"Flemish",dz:"Dzongkha",en:"English",eo:"Esperanto",et:"Estonian",ee:"Ewe",fo:"Faroese",fj:"Fijian",fi:"Finnish",fr:"French",ff:"Fulah",gd:"Scottish Gaelic",gl:"Galician",lg:"Ganda",ka:"Georgian",de:"German",ki:"Kikuyu",el:"Greek, Modern (1453-)",kl:"Kalaallisut",gn:"Guarani",gu:"Gujarati",ht:"Haitian Creole",ha:"Hausa",he:"Hebrew",hz:"Herero",hi:"Hindi",ho:"Hiri Motu",hu:"Hungarian",is:"Icelandic",io:"Ido",ig:"Igbo",id:"Indonesian",ia:"Interlingua (International Auxiliary Language Association)",ie:"Occidental",iu:"Inuktitut",ik:"Inupiaq",ga:"Irish",it:"Italian",ja:"Japanese",jv:"Javanese",kn:"Kannada",kr:"Kanuri",ks:"Kashmiri",kk:"Kazakh",rw:"Kinyarwanda",ky:"Kyrgyz",kv:"Komi",kg:"Kongo",ko:"Korean",kj:"Kwanyama",ku:"Kurdish",lo:"Lao",la:"Latin",lv:"Latvian",lb:"Luxembourgish",li:"Limburgish",ln:"Lingala",lt:"Lithuanian",lu:"Luba-Katanga",mk:"Macedonian",mg:"Malagasy",ms:"Malay",ml:"Malayalam",mt:"Maltese",gv:"Manx",mi:"Maori",mr:"Marathi",mh:"Marshallese",ro:"Romanian",mn:"Mongolian",na:"Nauru",nv:"Navajo",nd:"North Ndebele",nr:"South Ndebele",ng:"Ndonga",ne:"Nepali",se:"Northern Sami",no:"Norwegian",nn:"Nynorsk, Norwegian",ii:"Sichuan Yi",oc:"Occitan (post 1500)",oj:"Ojibwa",or:"Oriya",om:"Oromo",os:"Ossetic",pi:"Pali",pa:"Punjabi",ps:"Pushto",fa:"Persian",pl:"Polish",pt:"Portuguese",qu:"Quechua",rm:"Romansh",rn:"Rundi",ru:"Russian",sm:"Samoan",sg:"Sango",sa:"Sanskrit",sc:"Sardinian",sr:"Serbian",sn:"Shona",sd:"Sindhi",si:"Sinhalese",sk:"Slovak",sl:"Slovenian",so:"Somali",st:"Sotho, Southern",su:"Sundanese",sw:"Swahili",ss:"Swati",sv:"Swedish",tl:"Tagalog",ty:"Tahitian",tg:"Tajik",ta:"Tamil",tt:"Tatar",te:"Telugu",th:"Thai",bo:"Tibetan",ti:"Tigrinya",to:"Tonga (Tonga Islands)",ts:"Tsonga",tn:"Tswana",tr:"Turkish",tk:"Turkmen",tw:"Twi",ug:"Uyghur",uk:"Ukrainian",ur:"Urdu",uz:"Uzbek",ve:"Venda",vi:"Vietnamese",vo:"Volapük",wa:"Walloon",cy:"Welsh",fy:"Western Frisian",wo:"Wolof",xh:"Xhosa",yi:"Yiddish",yo:"Yoruba",zu:"Zulu"},a={abk:"Abkhazian",ace:"Achinese",ach:"Acoli",ada:"Adangme",ady:"Adyghe",aar:"Afar",afh:"Afrihili",afr:"Afrikaans",afa:"Afro-Asiatic languages",ain:"Ainu",aka:"Akan",akk:"Akkadian",alb:"Albanian",sqi:"Albanian",gsw:"Swiss German",ale:"Aleut",alg:"Algonquian languages",tut:"Altaic languages",amh:"Amharic",anp:"Angika",apa:"Apache languages",ara:"Arabic",arg:"Aragonese",arp:"Arapaho",arw:"Arawak",arm:"Armenian",hye:"Armenian",rup:"Macedo-Romanian",art:"Artificial languages",asm:"Assamese",ast:"Leonese",ath:"Athapascan languages",aus:"Australian languages",map:"Austronesian languages",ava:"Avaric",ave:"Avestan",awa:"Awadhi",aym:"Aymara",aze:"Azerbaijani",ban:"Balinese",bat:"Baltic languages",bal:"Baluchi",bam:"Bambara",bai:"Bamileke languages",bad:"Banda languages",bnt:"Bantu languages",bas:"Basa",bak:"Bashkir",baq:"Basque",eus:"Basque",btk:"Batak languages",bej:"Beja",bel:"Belarusian",bem:"Bemba",ben:"Bengali",ber:"Berber languages",bho:"Bhojpuri",bih:"Bihari languages",bik:"Bikol",byn:"Blin",bin:"Edo",bis:"Bislama",zbl:"Blissymbols",nob:"Norwegian Bokmål",bos:"Bosnian",bra:"Braj",bre:"Breton",bug:"Buginese",bul:"Bulgarian",bua:"Buriat",bur:"Burmese",mya:"Burmese",cad:"Caddo",spa:"Spanish",cat:"Valencian",cau:"Caucasian languages",ceb:"Cebuano",cel:"Celtic languages",cai:"Central American Indian languages",khm:"Central Khmer",chg:"Chagatai",cmc:"Chamic languages",cha:"Chamorro",che:"Chechen",chr:"Cherokee",nya:"Nyanja",chy:"Cheyenne",chb:"Chibcha",chi:"Chinese",zho:"Chinese",chn:"Chinook jargon",chp:"Dene Suline",cho:"Choctaw",zha:"Zhuang",chu:"Old Slavonic",chk:"Chuukese",chv:"Chuvash",nwc:"Old Newari",syc:"Classical Syriac",rar:"Rarotongan",cop:"Coptic",cor:"Cornish",cos:"Corsican",cre:"Cree",mus:"Creek",crp:"Creoles and pidgins",cpe:"Creoles and pidgins, English based",cpf:"Creoles and pidgins, French-based",cpp:"Creoles and pidgins, Portuguese-based",crh:"Crimean Turkish",hrv:"Croatian",cus:"Cushitic languages",cze:"Czech",ces:"Czech",dak:"Dakota",dan:"Danish",dar:"Dargwa",del:"Delaware",div:"Maldivian",zza:"Zazaki",din:"Dinka",doi:"Dogri",dgr:"Dogrib",dra:"Dravidian languages",dua:"Duala",dut:"Flemish",nld:"Flemish",dum:"Dutch, Middle (ca.1050-1350)",dyu:"Dyula",dzo:"Dzongkha",frs:"Eastern Frisian",efi:"Efik",egy:"Egyptian (Ancient)",eka:"Ekajuk",elx:"Elamite",eng:"English",enm:"English, Middle (1100-1500)",ang:"English, Old (ca.450-1100)",myv:"Erzya",epo:"Esperanto",est:"Estonian",ewe:"Ewe",ewo:"Ewondo",fan:"Fang",fat:"Fanti",fao:"Faroese",fij:"Fijian",fil:"Pilipino",fin:"Finnish",fiu:"Finno-Ugrian languages",fon:"Fon",fre:"French",fra:"French",frm:"French, Middle (ca.1400-1600)",fro:"French, Old (842-ca.1400)",fur:"Friulian",ful:"Fulah",gaa:"Ga",gla:"Scottish Gaelic",car:"Galibi Carib",glg:"Galician",lug:"Ganda",gay:"Gayo",gba:"Gbaya",gez:"Geez",geo:"Georgian",kat:"Georgian",ger:"German",deu:"German",nds:"Saxon, Low",gmh:"German, Middle High (ca.1050-1500)",goh:"German, Old High (ca.750-1050)",gem:"Germanic languages",kik:"Kikuyu",gil:"Gilbertese",gon:"Gondi",gor:"Gorontalo",got:"Gothic",grb:"Grebo",grc:"Greek, Ancient (to 1453)",gre:"Greek, Modern (1453-)",ell:"Greek, Modern (1453-)",kal:"Kalaallisut",grn:"Guarani",guj:"Gujarati",gwi:"Gwich'in",hai:"Haida",hat:"Haitian Creole",hau:"Hausa",haw:"Hawaiian",heb:"Hebrew",her:"Herero",hil:"Hiligaynon",him:"Western Pahari languages",hin:"Hindi",hmo:"Hiri Motu",hit:"Hittite",hmn:"Mong",hun:"Hungarian",hup:"Hupa",iba:"Iban",ice:"Icelandic",isl:"Icelandic",ido:"Ido",ibo:"Igbo",ijo:"Ijo languages",ilo:"Iloko",arc:"Official Aramaic (700-300 BCE)",smn:"Inari Sami",inc:"Indic languages",ine:"Indo-European languages",ind:"Indonesian",inh:"Ingush",ina:"Interlingua (International Auxiliary Language Association)",ile:"Occidental",iku:"Inuktitut",ipk:"Inupiaq",ira:"Iranian languages",gle:"Irish",mga:"Irish, Middle (900-1200)",sga:"Irish, Old (to 900)",iro:"Iroquoian languages",ita:"Italian",jpn:"Japanese",jav:"Javanese",kac:"Kachin",jrb:"Judeo-Arabic",jpr:"Judeo-Persian",kbd:"Kabardian",kab:"Kabyle",xal:"Oirat",kam:"Kamba",kan:"Kannada",kau:"Kanuri",pam:"Pampanga",kaa:"Kara-Kalpak",krc:"Karachay-Balkar",krl:"Karelian",kar:"Karen languages",kas:"Kashmiri",csb:"Kashubian",kaw:"Kawi",kaz:"Kazakh",kha:"Khasi",khi:"Khoisan languages",kho:"Sakan",kmb:"Kimbundu",kin:"Kinyarwanda",kir:"Kyrgyz",tlh:"tlhIngan-Hol",kom:"Komi",kon:"Kongo",kok:"Konkani",kor:"Korean",kos:"Kosraean",kpe:"Kpelle",kro:"Kru languages",kua:"Kwanyama",kum:"Kumyk",kur:"Kurdish",kru:"Kurukh",kut:"Kutenai",lad:"Ladino",lah:"Lahnda",lam:"Lamba",day:"Land Dayak languages",lao:"Lao",lat:"Latin",lav:"Latvian",ltz:"Luxembourgish",lez:"Lezghian",lim:"Limburgish",lin:"Lingala",lit:"Lithuanian",jbo:"Lojban",dsb:"Lower Sorbian",loz:"Lozi",lub:"Luba-Katanga",lua:"Luba-Lulua",lui:"Luiseno",smj:"Lule Sami",lun:"Lunda",luo:"Luo (Kenya and Tanzania)",lus:"Lushai",mac:"Macedonian",mkd:"Macedonian",mad:"Madurese",mag:"Magahi",mai:"Maithili",mak:"Makasar",mlg:"Malagasy",may:"Malay",msa:"Malay",mal:"Malayalam",mlt:"Maltese",mnc:"Manchu",mdr:"Mandar",man:"Mandingo",mni:"Manipuri",mno:"Manobo languages",glv:"Manx",mao:"Maori",mri:"Maori",arn:"Mapudungun",mar:"Marathi",chm:"Mari",mah:"Marshallese",mwr:"Marwari",mas:"Masai",myn:"Mayan languages",men:"Mende",mic:"Micmac",min:"Minangkabau",mwl:"Mirandese",moh:"Mohawk",mdf:"Moksha",rum:"Romanian",ron:"Romanian",mkh:"Mon-Khmer languages",lol:"Mongo",mon:"Mongolian",mos:"Mossi",mul:"Multiple languages",mun:"Munda languages",nqo:"N'Ko",nah:"Nahuatl languages",nau:"Nauru",nav:"Navajo",nde:"North Ndebele",nbl:"South Ndebele",ndo:"Ndonga",nap:"Neapolitan",new:"Newari",nep:"Nepali",nia:"Nias",nic:"Niger-Kordofanian languages",ssa:"Nilo-Saharan languages",niu:"Niuean",zxx:"Not applicable",nog:"Nogai",non:"Norse, Old",nai:"North American Indian languages",frr:"Northern Frisian",sme:"Northern Sami",nso:"Sotho, Northern",nor:"Norwegian",nno:"Nynorsk, Norwegian",nub:"Nubian languages",iii:"Sichuan Yi",nym:"Nyamwezi",nyn:"Nyankole",nyo:"Nyoro",nzi:"Nzima",oci:"Occitan (post 1500)",pro:"Provençal, Old (to 1500)",oji:"Ojibwa",ori:"Oriya",orm:"Oromo",osa:"Osage",oss:"Ossetic",oto:"Otomian languages",pal:"Pahlavi",pau:"Palauan",pli:"Pali",pag:"Pangasinan",pan:"Punjabi",pap:"Papiamento",paa:"Papuan languages",pus:"Pushto",per:"Persian",fas:"Persian",peo:"Persian, Old (ca.600-400 B.C.)",phi:"Philippine languages",phn:"Phoenician",pon:"Pohnpeian",pol:"Polish",por:"Portuguese",pra:"Prakrit languages",que:"Quechua",raj:"Rajasthani",rap:"Rapanui","qaa-qtz":"Reserved for local use",roa:"Romance languages",roh:"Romansh",rom:"Romany",run:"Rundi",rus:"Russian",sal:"Salishan languages",sam:"Samaritan Aramaic",smi:"Sami languages",smo:"Samoan",sad:"Sandawe",sag:"Sango",san:"Sanskrit",sat:"Santali",srd:"Sardinian",sas:"Sasak",sco:"Scots",sel:"Selkup",sem:"Semitic languages",srp:"Serbian",srr:"Serer",shn:"Shan",sna:"Shona",scn:"Sicilian",sid:"Sidamo",sgn:"Sign Languages",bla:"Siksika",snd:"Sindhi",sin:"Sinhalese",sit:"Sino-Tibetan languages",sio:"Siouan languages",sms:"Skolt Sami",den:"Slave (Athapascan)",sla:"Slavic languages",slo:"Slovak",slk:"Slovak",slv:"Slovenian",sog:"Sogdian",som:"Somali",son:"Songhai languages",snk:"Soninke",wen:"Sorbian languages",sot:"Sotho, Southern",sai:"South American Indian languages",alt:"Southern Altai",sma:"Southern Sami",srn:"Sranan Tongo",suk:"Sukuma",sux:"Sumerian",sun:"Sundanese",sus:"Susu",swa:"Swahili",ssw:"Swati",swe:"Swedish",syr:"Syriac",tgl:"Tagalog",tah:"Tahitian",tai:"Tai languages",tgk:"Tajik",tmh:"Tamashek",tam:"Tamil",tat:"Tatar",tel:"Telugu",ter:"Tereno",tet:"Tetum",tha:"Thai",tib:"Tibetan",bod:"Tibetan",tig:"Tigre",tir:"Tigrinya",tem:"Timne",tiv:"Tiv",tli:"Tlingit",tpi:"Tok Pisin",tkl:"Tokelau",tog:"Tonga (Nyasa)",ton:"Tonga (Tonga Islands)",tsi:"Tsimshian",tso:"Tsonga",tsn:"Tswana",tum:"Tumbuka",tup:"Tupi languages",tur:"Turkish",ota:"Turkish, Ottoman (1500-1928)",tuk:"Turkmen",tvl:"Tuvalu",tyv:"Tuvinian",twi:"Twi",udm:"Udmurt",uga:"Ugaritic",uig:"Uyghur",ukr:"Ukrainian",umb:"Umbundu",mis:"Uncoded languages",und:"Undetermined",hsb:"Upper Sorbian",urd:"Urdu",uzb:"Uzbek",vai:"Vai",ven:"Venda",vie:"Vietnamese",vol:"Volapük",vot:"Votic",wak:"Wakashan languages",wln:"Walloon",war:"Waray",was:"Washo",wel:"Welsh",cym:"Welsh",fry:"Western Frisian",wal:"Wolaytta",wol:"Wolof",xho:"Xhosa",sah:"Yakut",yao:"Yao",yap:"Yapese",yid:"Yiddish",yor:"Yoruba",ypk:"Yupik languages",znd:"Zande languages",zap:"Zapotec",zen:"Zenaga",zul:"Zulu",zun:"Zuni"},r={AF:"AFGHANISTAN",AX:"ÅLAND ISLANDS",AL:"ALBANIA",DZ:"ALGERIA",AS:"AMERICAN SAMOA",AD:"ANDORRA",AO:"ANGOLA",AI:"ANGUILLA",AQ:"ANTARCTICA",AG:"ANTIGUA AND BARBUDA",AR:"ARGENTINA",AM:"ARMENIA",AW:"ARUBA",AU:"AUSTRALIA",AT:"AUSTRIA",AZ:"AZERBAIJAN",BS:"BAHAMAS",BH:"BAHRAIN",BD:"BANGLADESH",BB:"BARBADOS",BY:"BELARUS",BE:"BELGIUM",BZ:"BELIZE",BJ:"BENIN",BM:"BERMUDA",BT:"BHUTAN",BO:"BOLIVIA, PLURINATIONAL STATE OF",BQ:"BONAIRE, SINT EUSTATIUS AND SABA",BA:"BOSNIA AND HERZEGOVINA",BW:"BOTSWANA",BV:"BOUVET ISLAND",BR:"BRAZIL",IO:"BRITISH INDIAN OCEAN TERRITORY",BN:"BRUNEI DARUSSALAM",BG:"BULGARIA",BF:"BURKINA FASO",BI:"BURUNDI",KH:"CAMBODIA",CM:"CAMEROON",CA:"CANADA",CV:"CAPE VERDE",KY:"CAYMAN ISLANDS",CF:"CENTRAL AFRICAN REPUBLIC",TD:"CHAD",CL:"CHILE",CN:"CHINA",CX:"CHRISTMAS ISLAND",CC:"COCOS (KEELING) ISLANDS",CO:"COLOMBIA",KM:"COMOROS",CG:"CONGO",CD:"CONGO, THE DEMOCRATIC REPUBLIC OF THE",CK:"COOK ISLANDS",CR:"COSTA RICA",CI:"CÔTE D'IVOIRE",HR:"CROATIA",CU:"CUBA",CW:"CURAÇAO",CY:"CYPRUS",CZ:"CZECH REPUBLIC",DK:"DENMARK",DJ:"DJIBOUTI",DM:"DOMINICA",DO:"DOMINICAN REPUBLIC",EC:"ECUADOR",EG:"EGYPT",SV:"EL SALVADOR",GQ:"EQUATORIAL GUINEA",ER:"ERITREA",EE:"ESTONIA",ET:"ETHIOPIA",FK:"FALKLAND ISLANDS (MALVINAS)",FO:"FAROE ISLANDS",FJ:"FIJI",FI:"FINLAND",FR:"FRANCE",GF:"FRENCH GUIANA",PF:"FRENCH POLYNESIA",TF:"FRENCH SOUTHERN TERRITORIES",GA:"GABON",GM:"GAMBIA",GE:"GEORGIA",DE:"GERMANY",GH:"GHANA",GI:"GIBRALTAR",GR:"GREECE",GL:"GREENLAND",GD:"GRENADA",GP:"GUADELOUPE",GU:"GUAM",GT:"GUATEMALA",GG:"GUERNSEY",GN:"GUINEA",GW:"GUINEA-BISSAU",GY:"GUYANA",HT:"HAITI",HM:"HEARD ISLAND AND MCDONALD ISLANDS",VA:"HOLY SEE (VATICAN CITY STATE)",HN:"HONDURAS",HK:"HONG KONG",HU:"HUNGARY",IS:"ICELAND",IN:"INDIA",ID:"INDONESIA",IR:"IRAN, ISLAMIC REPUBLIC OF",IQ:"IRAQ",IE:"IRELAND",IM:"ISLE OF MAN",IL:"ISRAEL",IT:"ITALY",JM:"JAMAICA",JP:"JAPAN",JE:"JERSEY",JO:"JORDAN",KZ:"KAZAKHSTAN",KE:"KENYA",KI:"KIRIBATI",KP:"KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF",KR:"KOREA, REPUBLIC OF",KW:"KUWAIT",KG:"KYRGYZSTAN",LA:"LAO PEOPLE'S DEMOCRATIC REPUBLIC",LV:"LATVIA",LB:"LEBANON",LS:"LESOTHO",LR:"LIBERIA",LY:"LIBYA",LI:"LIECHTENSTEIN",LT:"LITHUANIA",LU:"LUXEMBOURG",MO:"MACAO",MK:"MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF",MG:"MADAGASCAR",MW:"MALAWI",MY:"MALAYSIA",MV:"MALDIVES",ML:"MALI",MT:"MALTA",MH:"MARSHALL ISLANDS",MQ:"MARTINIQUE",MR:"MAURITANIA",MU:"MAURITIUS",YT:"MAYOTTE",MX:"MEXICO",FM:"MICRONESIA, FEDERATED STATES OF",MD:"MOLDOVA, REPUBLIC OF",MC:"MONACO",MN:"MONGOLIA",ME:"MONTENEGRO",MS:"MONTSERRAT",MA:"MOROCCO",MZ:"MOZAMBIQUE",MM:"MYANMAR",NA:"NAMIBIA",NR:"NAURU",NP:"NEPAL",NL:"NETHERLANDS",NC:"NEW CALEDONIA",NZ:"NEW ZEALAND",NI:"NICARAGUA",NE:"NIGER",NG:"NIGERIA",NU:"NIUE",NF:"NORFOLK ISLAND",MP:"NORTHERN MARIANA ISLANDS",NO:"NORWAY",OM:"OMAN",PK:"PAKISTAN",PW:"PALAU",PS:"PALESTINIAN TERRITORY, OCCUPIED",PA:"PANAMA",PG:"PAPUA NEW GUINEA",PY:"PARAGUAY",PE:"PERU",PH:"PHILIPPINES",PN:"PITCAIRN",PL:"POLAND",PT:"PORTUGAL",PR:"PUERTO RICO",QA:"QATAR",RE:"RÉUNION",RO:"ROMANIA",RU:"RUSSIAN FEDERATION",RW:"RWANDA",BL:"SAINT BARTHÉLEMY",SH:"SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA",KN:"SAINT KITTS AND NEVIS",LC:"SAINT LUCIA",MF:"SAINT MARTIN (FRENCH PART)",PM:"SAINT PIERRE AND MIQUELON",VC:"SAINT VINCENT AND THE GRENADINES",WS:"SAMOA",SM:"SAN MARINO",ST:"SAO TOME AND PRINCIPE",SA:"SAUDI ARABIA",SN:"SENEGAL",RS:"SERBIA",SC:"SEYCHELLES",SL:"SIERRA LEONE",SG:"SINGAPORE",SX:"SINT MAARTEN (DUTCH PART)",SK:"SLOVAKIA",SI:"SLOVENIA",SB:"SOLOMON ISLANDS",SO:"SOMALIA",ZA:"SOUTH AFRICA",GS:"SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS",SS:"SOUTH SUDAN",ES:"SPAIN",LK:"SRI LANKA",SD:"SUDAN",SR:"SURINAME",SJ:"SVALBARD AND JAN MAYEN",SZ:"SWAZILAND",SE:"SWEDEN",CH:"SWITZERLAND",SY:"SYRIAN ARAB REPUBLIC",TW:"TAIWAN, PROVINCE OF CHINA",TJ:"TAJIKISTAN",TZ:"TANZANIA, UNITED REPUBLIC OF",TH:"THAILAND",TL:"TIMOR-LESTE",TG:"TOGO",TK:"TOKELAU",TO:"TONGA",TT:"TRINIDAD AND TOBAGO",TN:"TUNISIA",TR:"TURKEY",TM:"TURKMENISTAN",TC:"TURKS AND CAICOS ISLANDS",TV:"TUVALU",UG:"UGANDA",UA:"UKRAINE",AE:"UNITED ARAB EMIRATES",GB:"UNITED KINGDOM",US:"UNITED STATES",UM:"UNITED STATES MINOR OUTLYING ISLANDS",UY:"URUGUAY",UZ:"UZBEKISTAN",VU:"VANUATU",VE:"VENEZUELA, BOLIVARIAN REPUBLIC OF",VN:"VIET NAM",VG:"VIRGIN ISLANDS, BRITISH",VI:"VIRGIN ISLANDS, U.S.",WF:"WALLIS AND FUTUNA",EH:"WESTERN SAHARA",YE:"YEMEN",ZM:"ZAMBIA",ZW:"ZIMBABWE"};if(t.length>2)throw new SyntaxError("Unexpected number of segments "+t.length);return t.length>1?(n[t[0]]||a[t[0]]||t[0])+", "+(r[t[1]]||t[1]):t.length>0?n[t[0]]||a[t[0]]||r[t[0]]||t[0]:""}(a.locale),i=document.querySelector(".w-footer__date");i&&i.insertAdjacentHTML("beforebegin",`\n      <span id="tpt-user-locale" title="${r}">${a.locale}</span>\n    `)}});(new o.a).subscribe("setOptions",e=>{e.hosts&&e.hosts.some(e=>e===document.location.host)&&h.setOptions(e)})},,,function(e,t,n){"use strict";var a=n(30),r=n(41),i=n(60),o=n(37),s=n(31),c=n(39),u=Object(c.a)(Object.getPrototypeOf,Object),l=n(45),d=n(40),p=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)Object(s.a)(t,Object(l.a)(e)),e=u(e);return t}:d.a,h=n(44),f=n(9),b=n(38);var v=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t},g=Object.prototype.hasOwnProperty;var A=function(e){if(!Object(f.a)(e))return v(e);var t=Object(b.a)(e),n=[];for(var a in e)("constructor"!=a||!t&&g.call(e,a))&&n.push(a);return n},m=n(22);var y=function(e){return Object(m.a)(e)?Object(h.a)(e,!0):A(e)};var O=function(e){return Object(o.a)(e,y,p)};t.a=function(e,t){if(null==e)return{};var n=Object(a.a)(O(e),(function(e){return[e]}));return t=Object(r.a)(t),Object(i.a)(e,n,(function(e,n){return t(e,n[0])}))}},function(e,t,n){"use strict";var a=n(30),r=n(41);var i=function(e){return function(t,n,a){for(var r=-1,i=Object(t),o=a(t),s=o.length;s--;){var c=o[e?s:++r];if(!1===n(i[c],c,i))break}return t}}(),o=n(23);var s=function(e,t){return e&&i(e,t,o.a)},c=n(22);var u=function(e,t){return function(n,a){if(null==n)return n;if(!Object(c.a)(n))return e(n,a);for(var r=n.length,i=t?r:-1,o=Object(n);(t?i--:++i<r)&&!1!==a(o[i],i,o););return n}}(s);var l=function(e,t){var n=-1,a=Object(c.a)(e)?Array(e.length):[];return u(e,(function(e,r,i){a[++n]=t(e,r,i)})),a},d=n(0);t.a=function(e,t){return(Object(d.a)(e)?a.a:l)(e,Object(r.a)(t,3))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,